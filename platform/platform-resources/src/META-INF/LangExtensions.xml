<idea-plugin>
  <extensionPoints>
  </extensionPoints>
  <extensions defaultExtensionNs="com.intellij">


    <projectConfigurable groupId="editor"
                         id="editor.reader.mode" key="title.reader.mode"
                         bundle="messages.LangBundle"
                         order="after editor.preferences.import"
                         provider="com.intellij.codeInsight.actions.ReaderModeConfigurableProvider"/>


    <statistics.projectUsagesCollector implementation="com.intellij.internal.statistic.collectors.fus.fileTypes.FileTypeUsagesCollector"/>
    <statistics.validation.customValidationRule
      implementation="com.intellij.internal.statistic.collectors.fus.actions.persistence.ToolWindowCollector$ToolWindowUtilValidator"/>
    <statistics.validation.customValidationRule
      implementation="com.intellij.internal.statistic.collectors.fus.fileTypes.FileTypeUsagesCollector$ValidationRule"/>
    <statistics.validation.customValidationRule
      implementation="com.intellij.internal.statistic.collectors.fus.fileTypes.FileTypeUsageCounterCollector$FileTypeSchemaValidator"/>

    <statusBarWidgetFactory id="VfsRefresh" implementation="com.intellij.openapi.wm.impl.status.VfsRefreshIndicatorWidgetFactory"
                            order="first"/>
    <statusBarWidgetFactory id="Position" implementation="com.intellij.openapi.wm.impl.status.PositionPanelWidgetFactory"/>
    <statusBarWidgetFactory id="LineSeparator" implementation="com.intellij.openapi.wm.impl.status.LineSeparatorWidgetFactory"
                            order="after Position"/>
    <statusBarWidgetFactory id="Encoding" implementation="com.intellij.openapi.wm.impl.status.EncodingPanelWidgetFactory"
                            order="after LineSeparator"/>
    <statusBarWidgetFactory id="PowerSaveMode" implementation="com.intellij.openapi.wm.impl.status.PowerSaveStatusWidgetFactory"
                            order="after Encoding"/>
    <statusBarWidgetFactory id="InsertOverwrite" implementation="com.intellij.openapi.wm.impl.status.ColumnSelectionModeWidgetFactory"
                            order="after largeFileEncodingWidget"/>
    <statusBarWidgetFactory id="ReadOnlyAttribute" implementation="com.intellij.openapi.wm.impl.status.ReadOnlyAttributeWidgetFactory"
                            order="after CodeStyleStatusBarWidget"/>
    <statusBarWidgetFactory id="Notifications" implementation="com.intellij.notification.impl.widget.NotificationWidgetFactory"
                            order="after inspectionProfileWidget"/>
    <statusBarWidgetFactory id="FatalError" implementation="com.intellij.openapi.wm.impl.status.FatalErrorWidgetFactory"
                            order="after Notifications"/>
    <statusBarWidgetFactory id="WriteThread" implementation="com.intellij.openapi.wm.impl.status.WriteThreadIndicatorWidgetFactory"
                            order="last"/>
    <statusBarWidgetFactory id="Memory" implementation="com.intellij.openapi.wm.impl.status.MemoryIndicatorWidgetFactory"
                            order="last"/>
    <statusBarWidgetFactory id="settingsEntryPointWidget" implementation="com.intellij.ide.actions.SettingsEntryPointAction$StatusBarManager"
                            order="last"/>
    <statusBarWidgetFactory id="SmartModeIndicator" implementation="com.intellij.openapi.wm.impl.status.SmartModeIndicatorWidgetFactory"/>
    <statusBarWidgetFactory id="IndexesAndVfsFlushIndicator" implementation="com.intellij.openapi.wm.impl.status.IndexesAndVfsFlushIndicatorWidgetFactory"/>



    <nonProjectFileWritingAccessExtension implementation="com.intellij.ide.actions.EditCustomPropertiesAction$AccessExtension"/>
    <nonProjectFileWritingAccessExtension implementation="com.intellij.ide.actions.EditCustomVmOptionsAction$AccessExtension"/>

    <applicationService serviceInterface="com.intellij.openapi.application.PathMacros"
                        serviceImplementation="com.intellij.ide.macro.IdePathMacros"/>

    <applicationService serviceInterface="com.intellij.ui.ExperimentalUI"
                        serviceImplementation="com.intellij.ui.ExperimentalUIImpl"/>
  </extensions>
  <extensions defaultExtensionNs="com.intellij.platform.backend">

  </extensions>
  <applicationListeners>
  </applicationListeners>
  <projectListeners>
  </projectListeners>
</idea-plugin>
